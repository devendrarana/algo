#include <iostream>
#include<stack>
#include<vector>
#include<unordered_set>
using namespace std;
void dfs(unordered_set<int>& visited,vector<int>*edges,int start,stack<int> &finishVertices)
{
    visited.insert(start);
 for(int i=0;i<edges[start].size();i++)
 {
     int adjacent=edges[start][i];
     if(visited.count(adjacent)==0)
        dfs(visited,edges,adjacent,finishVertices);
 }
    finishVertices.push(start);
}
void dfs2(unordered_set<int> &visited,vector<int> *edgesT,int start,unordered_set<int>*component)
{
    visited.insert(start);
    component->insert(start);
    
   for(int i=0;i<edgesT[start].size();i++)
 {
     int adjacent=edgesT[start][i];
     if(visited.count(adjacent)==0)
        dfs2(visited,edgesT,adjacent,component);
 }
 
}
unordered_set<unordered_set<int>*>* getSCC(vector<int>* edges,vector<int>* edgesT,int n)
{
    unordered_set<int> visited;
    stack<int> finishVertices ;
    for(int i=0;i<n;i++)
    {
        if(visited.count(i)==0)
        dfs(visited,edges,i,finishVertices);
    }
    
unordered_set<unordered_set<int>*>* output=new unordered_set<unordered_set<int>*>();
visited.clear();
while(finishVertices.size()!=0)
{
    int element=finishVertices.top();
    finishVertices.pop();
    
    if(visited.count(element)!=0)
    {
        continue;
    }
    unordered_set<int>* component=new unordered_set<int>();
    dfs2(visited,edgesT,element,component);
        output->insert(component);
}
return output;
    
}
int main() {
    int n;
    cin>>n;
    vector<int>* edges=new vector<int>[n];
    vector<int>* edgesT=new vector<int>[n];
    int m;
    cin>>m;
    while(m--)
    {
        int j,k;
        cin>>j>>k;
        edges[j-1].push_back(k-1);
        edgesT[k-1].push_back(j-1);
    }
    unordered_set<unordered_set<int>*>* components=getSCC(edges,edgesT,n);
    unordered_set<unordered_set<int>*>::iterator i1=components->begin();
    while(i1!=components->end())
    {
        unordered_set<int>* component=*i1;
        unordered_set<int>::iterator i2=component->begin();
        while(i2!=component->end())
        {
        cout <<*i2 +1 << " ";
        i2++;
        }
        cout<<endl;
        delete component;
        i1++;
    }
    delete components;
    delete [] edges;
    delete [] edgesT;
	return 0;
}
