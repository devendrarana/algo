#include <iostream>
using namespace std;
void buildtree(int ar[],int* tree,int srt,int end,int treenode)
{
    if(srt==end)
    {
        tree[treenode]=ar[srt];
        return;
    }
    int mid=(srt+end)/2;
    buildtree(ar,tree,srt,mid,2*treenode);
    buildtree(ar,tree,mid+1,end,2*treenode+1);
    tree[treenode]=min(tree[2*treenode],tree[2*treenode+1]);
}
void updateSegementTreeLazy(int*tree,int *lazy,int low,int high,int srtr,int endr,int currentPosition,int inc)
{
    if(low>high)
    return;
    
    if(lazy[currentPosition]!=0)
    {
        tree[currentPosition]+=lazy[currentPosition];
        if(low!=high){
            lazy[2*currentPosition]+=lazy[currentPosition];
            lazy[2*currentPosition+1]+=lazy[currentPosition];
            
        }
        lazy[currentPosition]=0;
        
    }
    if(low>endr||srtr>high)
    return ;
    if(srtr<=low&&endr>=high)
    {
        tree[currentPosition]+=inc;
        if(low!=high)
         {
        lazy[2*currentPosition]+=inc;
        lazy[2*currentPosition+1]+=inc;
        }
    return;
    }
    int mid=(low+high)/2;
    updateSegementTreeLazy(tree,lazy,low,mid,srtr,endr,2*currentPosition,inc);
    updateSegementTreeLazy(tree,lazy,mid+1,high,srtr,endr,2*currentPosition+1,inc);
    tree[currentPosition]=min(tree[2*currentPosition],tree[2*currentPosition+1]);
    return;
}
int main() {
    int ar[]={1,3,-2,4};
int* tree=new int[12]();
int *lazy=new int[12]();
buildtree(ar,tree,0,3,1);
updateSegementTreeLazy(tree,lazy,0,3,0,3,1,3);
updateSegementTreeLazy(tree,lazy,0,3,0,1,1,2);
for(int i=0;i<12;i++)
std::cout << tree[i] << std::endl;
std::cout <<"lazy" << std::endl;
for(int i=1;i<12;i++)
std::cout << lazy[i] << std::endl;
	return 0;
}
